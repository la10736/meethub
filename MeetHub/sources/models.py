from django.db import models
from django.utils import timezone
from events.models import BaseAbstract, Event
import datetime
from hubs.models import Hub
import logging

class Source(BaseAbstract):
    name = models.TextField(max_length=60)
    description = models.TextField(max_length=250)
    events = models.ManyToManyField(Event, through='EventGenerator')
    
    hub = models.ForeignKey(Hub, null=True)
    
    def _event_generated(self, ev):
        logging.info("Event %s generated by %s"%(ev.title,self.name))
        EventGenerator.objects.create(source=self, event=ev,
                                            when=timezone.now())
    
    def get_undipatched_events(self):
        return self.events.filter(start_date__gte=timezone.now(), 
                                  eventdispatched__isnull=True).order_by('-start_date')

class EventGenerator(models.Model):
    event = models.ForeignKey(Event)
    source = models.ForeignKey(Source)
    when = models.DateField()

class DebugSource(Source):
    cls_tag = "dbg"
    tag = models.TextField(max_length=60)
    
    def new_event(self, body, place, start, dur=3):
        body = """%s/n/n[%s]/nTAG=%s"""%(body,self.description,self.tag)
        self._event_generated(Event.objects.create(title=self.name, start_date=start,
               end_date=start + datetime.timedelta(hours=dur), place=place,body=body))


class TestSource(Source):
    cls_tag = "tst"
    test = models.TextField(max_length=25)
